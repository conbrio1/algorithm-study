package boj.boj17179;
// 케이크 자르기

// 가장 작은 조각의 길이의 최댓값을 구하기
// dfs가 아닌 이분 탐색을 해야 함
// https://velog.io/@kjihye0340/백준-17179케이크-자르기Java

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    static int N, M, L;
    static int maxLength;

    static void dfs(int[] cutPoint, int[] cutList, int count, int index) {
        if (count == cutList.length) {
            int min = cutList[0];
            for (int i = 0; i < cutList.length - 1; i++) {
                min = Math.min(min, cutList[i + 1] - cutList[i]);
            }
            min = Math.min(min, L - cutList[cutList.length - 1]);
            maxLength = Math.max(maxLength, min);
            return;
        }

        // 뽑을 수 있는 개수 < 뽑아야 하는 남은 개수
        if (cutPoint.length - index < cutList.length - count)
            return;

        for (int i = index; i < cutPoint.length; i++) {
            cutList[count] = cutPoint[i];
            dfs(cutPoint, cutList, count + 1, i + 1);
        }
    }

    static int solution(int[] cutPoint, int cutNum) {
        maxLength = 0;
        int[] cutList = new int[cutNum];

        dfs(cutPoint, cutList, 0, 0);

        return maxLength;
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        L = Integer.parseInt(st.nextToken());

        int[] cutPoint = new int[M];
        for (int i = 0; i < M; i++) {
            cutPoint[i] = Integer.parseInt(br.readLine());
        }

        int[] cutNums = new int[N];
        for (int i = 0; i < N; i++) {
            cutNums[i] = Integer.parseInt(br.readLine());
        }
        for (int i = 0; i < N; i++) {
            System.out.println(solution(cutPoint, cutNums[i]));
        }
    }
}