package boj.boj1759;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
    static StringBuilder sb;
    static char[] vowel = { 'a', 'e', 'i', 'o', 'u' };

    static void solve(int L, int C, char[] input, char[] output, int start, int count) {
        if (L - count > C - start + 1) // 뽑아야 하는 수가 뽑을 수 있는 수보다 많으면 return. 사실 이게 필요한지는 모르겠다..
            return;

        if (count == L) {
            int vCount = 0;
            for (int i = 0; i < L; i++) {
                for (int j = 0; j < 5; j++) {
                    if (output[i] == vowel[j])
                        vCount++;
                }
            }
            if (vCount >= 1 && vCount <= L - 2) {
                sb.append(output).append("\n");
            }
            return;
        }

        for (int i = start; i < C; i++) {
            output[count] = input[i];
            solve(L, C, input, output, i + 1, count + 1);
        }
    }

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        sb = new StringBuilder();

        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        int L = Integer.parseInt(st.nextToken());
        int C = Integer.parseInt(st.nextToken());

        st = new StringTokenizer(br.readLine(), " ");
        char[] input = new char[C];
        for (int i = 0; i < C; i++)
            input[i] = st.nextToken().charAt(0);
        Arrays.sort(input);

        solve(L, C, input, new char[L], 0, 0);
        bw.write(sb.toString());
        bw.close();
    }
}
